@using Microsoft.AspNetCore.Components
@using MediatR;

@using Flow.Core.Contracts
@using FlowUI.Pages
@using Flow.Core.DomainModels

<ProfileImageEditModal StateChangedNotifyParentComponent="OnProfilePictureChanged" @ref="ProfilePictureForm"></ProfileImageEditModal>

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Flow</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="d-flex justify-content-center px-3">
            <a @onclick="OpenProfilePictureForm">
                <ProfileImageDisplay @ref="ProfileImage" User="@LoggedInUser" SizeX="150" SizeY="200" />
            </a>
        </li>

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="worldflow">
                <span class="oi oi-globe" aria-hidden="true"></span> World Flow
            </NavLink>
        </li>

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="friends">
                <span class="oi oi-people" aria-hidden="true"></span> Friends Flow
            </NavLink>
        </li>

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/DetailsForm">
                <span class="oi oi-cog" aria-hidden="true"></span> Settings
            </NavLink>
        </li>
    </ul>
</div>

@code {
    [Inject]
    private IMediator _mediator { get; set; }

    [Inject]
    private ILoggedInUserService _loggedInUserService { get; set; }

    public ProfileImageEditModal ProfilePictureForm { get; set; }

    private ProfileImageDisplay ProfileImage { get; set; }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private User LoggedInUser { get; set; } = new User();

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetLoggedInUser();
    }

    public async Task GetLoggedInUser()
    {
        LoggedInUser = await _loggedInUserService.GetLoggedInUser();
    }

    public async Task OpenProfilePictureForm()
    {
        await ProfilePictureForm.OpenDialog();
    }

    public async Task OnProfilePictureChanged()
    {
        await GetLoggedInUser();
        ProfileImage.Refresh();
        StateHasChanged();
    }
}
